<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClearStagedChangesDialogMessage" xml:space="preserve">
    <value>You can choose to either clear the staging area and retain your edits or clear the staging area AND have variable values returned to their original states.</value>
    <comment>(StagedChangesViewModel) A dialog message displayed to the user when they try to unstage some staged variables. The outcome of the dialog, when displayed with this message, determines whether staged edits are retained when variables are returned back to the variables list, or whether the original values should be returned (i.e. the staged changes totally abandoned).</comment>
  </data>
  <data name="CommitWarningDialogMessage" xml:space="preserve">
    <value>Please note that changing variable values carries the risk of breaking aspects of your router, or potentially damaging its operations to such a degree that a reset is required.

NVRAMTuner is not responsible for any damage caused to your router by altering NVRAM variables, and it does not do any form of exhaustive checking to ensure that the values you have entered actually make sense.
You are responsible for taking regular backups and sanity checking the changes you are making.

Also, there is no guarantee that the router's firmware will not overwrite your changes after subsequent reboots. This is outside of NVRAMTuner's control.

By continuing, you agree that you are happy with the above.</value>
    <comment>(StagedChangesViewModel) A dialog message displayed to the user when they are committing for the first time (or if they have seen this message before but opted out from not seeing it again. This is a generic warning that by changing variables, they can potentially break their router and require it to go through a hard reset. It also includes details on the fact that variables may be overwritten upon a reboot by the firmware, and that NVRAMTuner cannot control this.</comment>
  </data>
  <data name="DisconnectWhileVariablesAreStagedDialogMessage" xml:space="preserve">
    <value>You currently have staged variables that you have made changes to. If you disconnect from your router, your staged changes will be abandoned. Are you sure you wish to continue?</value>
    <comment>(HomeViewModel) A message displayed to the user when they attempt to disconnect from the currently connected router when they have staged variables.</comment>
  </data>
  <data name="NoSavedRoutersFoundDialogMessage" xml:space="preserve">
    <value>NVRAMTuner was unable to find any routers on your system that were previously saved. If this is your first time using NVRAMTuner, enter the setup process now to add a router. Otherwise, please place a previously saved router file in the expected location.</value>
    <comment>(HomeViewModel) A message displayed in a dialog to the user when NVRAMTuner first starts if it is determined that there are no previously saved routers on their system that are able to be loaded.</comment>
  </data>
  <data name="RefreshWhileVariablesAreStagedDialogMessage" xml:space="preserve">
    <value>You currently have staged variables that you have made changes to. If you refresh the list of variables from your router, your staged changes will be abandoned. Are you sure you wish to continue?</value>
    <comment>(VariablesViewModel) A message displayed to the user when they attempt to refresh the list when they have staged variables. This dialog is displayed as when a variable is staged, it is removed from the overall variable list; if the list is then refreshed, the latest set (including the currently staged variables) will be pulled down, resulting in duplicates.</comment>
  </data>
  <data name="RouterSetupOverallFormErrorsMessage" xml:space="preserve">
    <value>There are errors in the form. Click into fields for specific errors</value>
    <comment>(RouterSetupViewModel) An overall form error message displayed to the user when there are errors with specific data in the filled out form they have provided that need to be fixed before they can continue.</comment>
  </data>
</root>